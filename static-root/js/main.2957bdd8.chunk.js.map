{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","console","log","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","retweet","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2957bdd8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react'\n\nimport {loadTweets} from '../lookup'\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets] // copy the new tweets array\n        console.log(tempNewTweets)\n        tempNewTweets.unshift({\n            content: newVal,\n            likes: 0,\n            id: 12313\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className} >\n    <div className='col-12 mb -3'>\n    <form onSubmit={handleSubmit}>\n        <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n        </textarea>\n        <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n    </form>\n    </div>\n    <TweetsList newTweets={newTweets}/>\n    </div>\n}\n\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    //setTweetsInit([...props.newTweets].concat()) commented because infinite loop\n      useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n        setTweets(final)\n        console.log(\"tweets\", tweets)\n        }\n      }, [props.newTweets, tweets, tweetsInit]) // this is called as the dependency array as on what is the useEffect dependent on\n\n      useEffect(() => {\n        const myCallback = (response, status) => {\n        console.log(\"response\", response)\n        if (status === 200){\n               console.log(\"yes\")\n               setTweetsInit(response)\n                console.log(\"tweetsINIt\", tweetsInit)\n            } else {\n                alert(\"There was an error\")\n            }\n  }\n    // do my lookup\n    loadTweets(myCallback)\n\n  },[])\n  return  tweetsInit.map((item, index)=>{\n                console.log(tweetsInit)\n                return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\n            })\n\n}\nexport function ActionBtn(props) {\n     const {tweet, action} = props\n     const [likes, setLikes] = useState(0);\n     const [userLike, setUserLike] = useState(false)\n     const className = props.className ? props.className : 'btn btn-primary btn-sm'\n     const actionDisplay = action.display ? action.display : 'Action'\n     //const display = action.type === 'like' ? `${tweet.likes} ${action.display}` : action.display\n     const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n           if(userLike === true) {\n            setLikes(likes - 1)\n            setUserLike(false)\n            } else {\n            setLikes(likes + 1)\n            setUserLike(true)\n            }\n            //likes = tweet.likes + 1\n        }\n     }\n     const display = action.type === 'like' ? `${likes} ${actionDisplay}` : action.display\n     return <button className={className} onClick={handleClick}>{display}</button>\n}\nexport function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p> {tweet.id} - {tweet.content} </p>\n        <div className = 'btn btn-group'>\n            <ActionBtn tweet={tweet} action={{type:\"like\", display:\"Likes\"}} />\n            <ActionBtn tweet={tweet} action={{type:\"unlike\", display:\"Unlike\"}} />\n            <ActionBtn retweet={tweet} action={{type:\"retweet\", display:\"Retweet\"}} />\n\n        </div>\n    </div>\n}\n","export function loadTweets(callback) {\n\n        const xhr = new XMLHttpRequest()\n        const method = 'GET'\n        const url = \" http://localhost:8000/api/tweets\"\n        const responseType = \"json\"\n\n        xhr.responseType = responseType\n        xhr.open(method, url)\n        xhr.onload = function() {\n            callback(xhr.response, xhr.status)\n        }\n        xhr.onerror = function (e) {\n            console.log(e)\n            callback({\"message\": \"The request was an error\"}, 400)\n        }\n        xhr.send()\n    }\n","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n           <TweetsComponent />\n        </div>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\n\n//ReactDOM.render(\n//  //<React.StrictMode>\n//    <App />,\n//  //</React.StrictMode>,\n//  document.getElementById('root')\n//);\n\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n    ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}