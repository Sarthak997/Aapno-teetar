{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/buttons.js","tweets/create.js","profiles/components.js","tweets/detail.js","tweets/feed.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","console","log","send","apiTweetFeed","nextUrl","undefined","replace","apiTweetList","username","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","content","ref","required","UserLink","children","UserDisplay","user","nameDisplay","includeFullName","first_name","last_name","Fragment","UserPicture","ParentTweet","parent","Tweet","isRetweet","retweeter","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urltweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","FeedList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","handledidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetsList","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","MyComponent","f","tweetsFeedEl","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f8b8ff7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data){\n    let jsonData;\n    if (data){\n    jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n       const url = `http://localhost:8000/api${endpoint}`\n       xhr.responseType = 'json'\n       const csrftoken = getCookie('csrftoken');\n       xhr.open(method, url)\n       xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n     if (csrftoken){\n        //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")  still not sure about this CORS issue\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n     }\n// otherwise if there was no csrf token it was giving an error\n        xhr.onload = function() {\n            if (xhr.status === 403 && xhr.response) {\n                const detail = xhr.response.detail\n                if (detail === \"Authentication credentials were not provided.\"){\n                    if (window.location.href.indexOf(\"login\") === -1) {\n                     window.location.href = \"/login?showLoginRequired=true\"\n                    }\n                }\n            }\n            callback(xhr.response, xhr.status)\n        }\n        xhr.onerror = function (e) {\n            console.log(\"error\", e)\n            callback({\"message\": \"The request was an error\"}, 400)\n        }\n        console.log(jsonData)\n        xhr.send(jsonData)\n    }\n\n\n//export function loadTweets(callback) {\n//\n//        const xhr = new XMLHttpRequest()\n//        const method = 'GET'\n//        const url = \" http://localhost:8000/api/tweets\"\n//        const responseType = \"json\"\n//\n//        xhr.responseType = responseType\n//        xhr.open(method, url)\n//        xhr.onload = function() {\n//            callback(xhr.response, xhr.status)\n//        }\n//        xhr.onerror = function (e) {\n//            console.log(e)\n//            callback({\"message\": \"The request was an error\"}, 400)\n//        }\n//        xhr.send()\n//    }\n\n//exported these all to lookup.js in tweets\n//export function createTweet(newTweet, callback){\n// lookup(\"POST\", \"/tweets/create/\", callback, {content:newTweet} )\n//}\n//\n//export function loadTweets(callback) {\n//\n//        lookup(\"GET\", \"/tweets/\", callback)\n//}","import {backendLookup} from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback){\n backendLookup(\"POST\", \"/tweets/create/\", callback, {content:newTweet} )\n}\n\nexport function apiTweetAction(tweetId, action,  callback){\n  const data = {id: tweetId, action: action}\n backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup(\"GET\", `/tweets/${tweetId}`, callback)\n}\n\nexport function apiTweetFeed(callback, nextUrl) {\n    let endpoint = \"/tweets/feed/\"\n    if (nextUrl !== null && nextUrl !== undefined) {\n        endpoint = nextUrl.replace( \"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}\n\n\nexport function apiTweetList(username, callback, nextUrl) {\n    let endpoint = \"/tweets/\"\n    if (username){\n       endpoint = `/tweets/?username=${username}`\n    }\n    if (nextUrl !== null && nextUrl !== undefined) {\n        endpoint = nextUrl.replace( \"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}\n\n\n","import React from 'react'\n\nimport {apiTweetAction} from './lookup'\n\n\n\nexport function ActionBtn(props) {\n     const {tweet, action, didPerformAction} = props\n     const likes = tweet.likes ? tweet.likes :0\n\n     const className = props.className ? props.className : 'btn btn-primary btn-sm'\n     const actionDisplay = action.display ? action.display : 'Action'\n\n     const handleActionBackendEvent = (response, status) =>{\n        console.log(status, response)\n        if((status === 200 || status === 201) && didPerformAction){\n            didPerformAction(response, status)\n        }\n     }\n     const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n     }\n     const display = action.type === 'like' ? `${likes} ${actionDisplay}` : action.display\n     return <button className={className} onClick={handleClick}>{display}</button>\n}","import React from 'react'\n\n\nimport {apiTweetCreate} from './lookup'\n\n\nexport function TweetCreate(props) {\n    const textAreaRef = React.createRef()\n    const {didTweet} = props\n    const handleBackendUpdate = (response, status) =>{\n           if (status === 201){\n                didTweet(response)\n           } else {\n                console.log(response)\n                alert(\"An error occured please try again\")\n           }\n\n        }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n\n        apiTweetCreate(newVal, handleBackendUpdate)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n        <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n            </textarea>\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n        </form>\n        </div>\n        }\n","import React from 'react'\n\n\n\n\n\n\nexport function UserLink (props) {\n    const {username} = props\n    const handleUserLink = (event) => {\n       window.location.href=`/profiles/${username}`\n    }\n    return <span className='pointer' onClick={handleUserLink}>\n         {props.children}\n    </span>\n}\n\nexport function UserDisplay (props) {\n    const {user, includeFullName} = props\n    const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name} ` : null\n    return <React.Fragment>\n         {nameDisplay}\n         <UserLink username={user.username}>@{user.username}</UserLink>\n    </React.Fragment>\n}\n\n\nexport function UserPicture (props) {\n    const {user} = props\n    return <UserLink username={user.username}><span className='mx-1 px-3 py-2 rounded-circle bg-dark text-white'>\n               {user.username[0]}\n           </span></UserLink>\n     }\n","import React, {useState} from 'react'\n\nimport {ActionBtn} from './buttons'\n\nimport {\n    UserDisplay,\n    UserPicture,\n} from '../profiles'\n\n\n//function UserLink (props) {\n//    const {username} = props\n//    const handleUserLink = (event) => {\n//       window.location.href=`/profiles/${username}`\n//    }\n//    return <span className='pointer'> onClick={handleUserLink}\n//         {props.children}\n//    </span>\n//}\n//\n//function UserDisplay (props) {\n//    const {user, includeFullName} = props\n//    const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name}{\" \"}` : null\n//    return <React.Fragment>\n//         {nameDisplay}\n//         <UserLink username={user.username}>@{user.username}></UserLink>\n//    </React.Fragment>\n//}\n//\n//\n//function UserPicture (props) {\n//    const {user} = props\n//    return <UserLink username={user.username}><span className='mx-1 px-3 py-2 rounded-circle bg-dark text-white'>\n//               {user.username[0]}\n//           </span></UserLink>\n//     }\n\nexport function ParentTweet(props){\n     const {tweet} = props\n     return tweet.parent ? <Tweet isRetweet retweeter={props.retweeter} hideActions className = {' '} tweet={tweet.parent} /> : null\n    }\n\n\nexport function Tweet(props) {\n    const {tweet, didRetweet, hideActions, isRetweet, retweeter} = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    let className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    className = isRetweet === true ? `${className} p-2 border rounded` : className\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/)\n    const urltweetId = match ? match.groups.tweetid : -1\n    const isDetail = `${tweet.id}` === `${urltweetId}`\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n    const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200){\n            setActionTweet(newActionTweet)\n        } else if (status === 201) {\n        //let the tweet list know\n            if (didRetweet){\n                didRetweet(newActionTweet)\n            }\n        }\n\n    }\n    return <div className={className}>\n    {isRetweet === true && <div className='mb-2'>\n            <span className='small text-muted'>Retweet via <UserDisplay user={retweeter} /></span>\n            </div>}\n        <div className='d-flex'>\n            <div className=''>\n              <UserPicture user={tweet.user} />\n            </div>\n                <div className='col-11'>\n                    <div>\n                            <p>\n                                <UserDisplay includeFullName user={tweet.user}/>\n                            </p>\n                            <p>{tweet.content} </p>\n\n                            <ParentTweet tweet={tweet} retweeter={tweet.user} />\n                    </div>\n                    <div className = 'btn btn-group px-0'>\n                       {(actionTweet && hideActions !== true) &&  <React.Fragment>\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"like\", display:\"Likes\"}} />\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"unlike\", display:\"Unlike\"}} />\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"retweet\", display:\"Retweet\"}} />\n                        </React.Fragment>\n                        }\n                        {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\n                    </div>\n\n                </div>\n             </div>\n        </div>\n}","import React, {useState, useEffect} from 'react'\n\nimport {apiTweetFeed} from './lookup'\n\nimport {Tweet} from './detail'\n\nexport function FeedList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidSet, setTweetsDidSet] = useState(false) // added because of infinite loop of lookup function\n    //setTweetsInit([...props.newTweets].concat()) commented because infinite loop\n      useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n        setTweets(final)\n        console.log(\"tweets\", tweets)\n        }\n      }, [props.newTweets, tweets, tweetsInit]) // this is called as the dependency array as on what is the useEffect dependent on\n\n      useEffect(() => {\n      if (tweetsDidSet === false){   //added this if loop to stop lookup loading again and again\n        const handleTweetListLookup = (response, status) => {\n        console.log(\"response\", response)\n        if (status === 200){\n               setNextUrl(response.next)\n               setTweetsInit(response.results)\n               setTweetsDidSet(true)\n                //console.log(\"tweetsINIt\", tweetsInit)\n            } else {\n                alert(\"There was a list error\")\n            }\n  }\n    // do my lookup\n    apiTweetFeed(handleTweetListLookup)\n    }\n  },[tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n\n  const handledidRetweet = (newTweet) => {\n    const updateTweetsInit = [...tweetsInit]\n    updateTweetsInit.unshift(newTweet)\n    setTweetsInit(updateTweetsInit)\n    const updateFinalTweets = [...tweets]\n    updateFinalTweets.unshift(tweets)\n    setTweets(updateFinalTweets)\n\n  }\n  const handleLoadNext = (event) => {\n    event.preventDefault()\n    if (nextUrl !== null){\n        const handleLoadNextResponse = (response, status)=>{\n            if (status ===200){\n                setNextUrl(response.next)\n                const newTweets = [...tweets].concat(response.next)\n                setTweetsInit(newTweets)\n                setTweets(newTweets)\n            }\n            else {\n            alert(\"There was an error\")\n            }\n        }\n        apiTweetFeed(handleLoadNextResponse, nextUrl)\n      }\n  }\n\n  return  <React.Fragment>{tweets.map((item, index)=>{\n                //console.log(tweetsInit)\n                return <Tweet tweet={item}\n                didRetweet = {handledidRetweet}\n                className='my-5 py-5 border bg-white text-dark'\n                key={`${index}-{item.id}`}/>\n            })}\n            { nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load Next</button>}\n            </React.Fragment>\n}","import React, {useState, useEffect} from 'react'\n\nimport {apiTweetList} from './lookup'\n\nimport {Tweet} from './detail'\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidSet, setTweetsDidSet] = useState(false) // added because of infinite loop of lookup function\n    //setTweetsInit([...props.newTweets].concat()) commented because infinite loop\n      useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n        setTweets(final)\n        console.log(\"tweets\", tweets)\n        }\n      }, [props.newTweets, tweets, tweetsInit]) // this is called as the dependency array as on what is the useEffect dependent on\n\n      useEffect(() => {\n      if (tweetsDidSet === false){   //added this if loop to stop lookup loading again and again\n        const handleTweetListLookup = (response, status) => {\n        console.log(\"response\", response)\n        if (status === 200){\n               setNextUrl(response.next)\n               setTweetsInit(response.results)\n               setTweetsDidSet(true)\n                //console.log(\"tweetsINIt\", tweetsInit)\n            } else {\n                alert(\"There was list error\")\n            }\n  }\n    // do my lookup\n    apiTweetList(props.username, handleTweetListLookup)\n    }\n  },[tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n\n  const handledidRetweet = (newTweet) => {\n    const updateTweetsInit = [...tweetsInit]\n    updateTweetsInit.unshift(newTweet)\n    setTweetsInit(updateTweetsInit)\n    const updateFinalTweets = [...tweets]\n    updateFinalTweets.unshift(tweets)\n    setTweets(updateFinalTweets)\n\n  }\n  const handleLoadNext = (event) => {\n    event.preventDefault()\n    if (nextUrl !== null){\n        const handleLoadNextResponse = (response, status)=>{\n            if (status ===200){\n                setNextUrl(response.next)\n                const newTweets = [...tweets].concat(response.next)\n                setTweetsInit(newTweets)\n                setTweets(newTweets)\n            }\n            else {\n            alert(\"There was an error\")\n            }\n        }\n        apiTweetList(props.username, handleLoadNextResponse, nextUrl)\n      }\n  }\n\n  return  <React.Fragment>{tweets.map((item, index)=>{\n                //console.log(tweetsInit)\n                return <Tweet tweet={item}\n                didRetweet = {handledidRetweet}\n                className='my-5 py-5 border bg-white text-dark'\n                key={`${index}-{item.id}`}/>\n            })}\n            { nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load Next</button>}\n            </React.Fragment>\n}","import React, {useEffect, useState} from 'react'\n\nimport {TweetCreate} from './create'\nimport {Tweet} from './detail'\nimport {apiTweetDetail} from './lookup'\nimport {FeedList} from './feed'\nimport {TweetsList} from './list'\n\n\n\nexport function FeedComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const handleNewTweet = (newTweet) =>{\n     // backend api response handler\n           let tempNewTweets = [...newTweets]\n           tempNewTweets.unshift(newTweet)\n           setNewTweets(tempNewTweets)\n\n        }\n\n\n    return <div className={props.className} >\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n     <FeedList newTweets={newTweets} {...props}/>\n    </div>\n}\n\nexport function TweetsComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const handleNewTweet = (newTweet) =>{\n     // backend api response handler\n           let tempNewTweets = [...newTweets]\n           tempNewTweets.unshift(newTweet)\n           setNewTweets(tempNewTweets)\n\n        }\n\n\n    return <div className={props.className} >\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n     <TweetsList newTweets={newTweets} {...props}/>\n    </div>\n}\n\n\n export function TweetDetailComponent(props) {\n    const {tweetId} = props\n    const [didLookup, setDidLookup] = useState(false)\n    const [tweet, setTweet] = useState(null)\n\n    const handleBackendLookup = (response, status) => {\n        if(status === 200){\n        setTweet(response)\n        }\n        else{\n        alert('There was an error finding your tweet.')\n        }\n    }\n       useEffect(()=>{\n        if (didLookup === false){\n            apiTweetDetail(tweetId, handleBackendLookup)\n            setDidLookup(true)\n        }\n\n    }, [tweetId, didLookup, setDidLookup])\n\n    return tweet === null ? null : <Tweet tweet={tweet} className = {props.className} />\n }\n\n//export function TweetsComponent(props) {\n//\n//    const textAreaRef = React.createRef()\n//    const [newTweets, setNewTweets] = useState([])\n//\n//    const canTweet = props.canTweet === \"false\" ? false : true\n//    const handleBackendUpdate = (response, status) =>\n//        {  // backend api response handler\n//           let tempNewTweets = [...newTweets]\n//           if (status === 201){\n//           tempNewTweets.unshift(response)\n//           setNewTweets(tempNewTweets)\n//           } else {\n//                console.log(response)\n//                alert(\"An error occured please try again\")\n//           }\n//\n//        }\n//\n//    const handleSubmit = (event) => {\n//        event.preventDefault()\n//        const newVal = textAreaRef.current.value\n////        let tempNewTweets = [...newTweets] // copy the new tweets array\n//\n//\n//\n//        apiTweetCreate(newVal, handleBackendUpdate)\n//\n////        createTweet(newVal, (response, status)=> {\n////           console.log(response, status)\n////           if (status === 201){\n////           tempNewTweets.unshift(response)\n////           setNewTweets(tempNewTweets)\n////           } else {\n////                console.log(response)\n////                alert(\"An error occured please try again\")\n////           }\n////\n////      })\n////\n////        setNewTweets(tempNewTweets)\n//        textAreaRef.current.value = ''\n//    }\n//    return <div className={props.className} >\n//    {canTweet === true &&<div className='col-12 mb -3'>\n//    <form onSubmit={handleSubmit}>\n//        <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n//\n//        </textarea>\n//        <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n//    </form>\n//    </div>\n//    }\n//    <TweetsList newTweets={newTweets} {...props}/>\n//    </div>\n//}\n\n\n//export function TweetsList(props) {\n//    const [tweetsInit, setTweetsInit] = useState([])\n//    const [tweets, setTweets] = useState([])\n//    const [tweetsDidSet, setTweetsDidSet] = useState(false) // added because of infinite loop of lookup function\n//    //setTweetsInit([...props.newTweets].concat()) commented because infinite loop\n//      useEffect(() => {\n//        const final = [...props.newTweets].concat(tweetsInit)\n//        if (final.length !== tweets.length) {\n//        setTweets(final)\n//        console.log(\"tweets\", tweets)\n//        }\n//      }, [props.newTweets, tweets, tweetsInit]) // this is called as the dependency array as on what is the useEffect dependent on\n//\n//      useEffect(() => {\n//      if (tweetsDidSet === false){   //added this if loop to stop lookup loading again and again\n//        const handleTweetListLookup = (response, status) => {\n//        console.log(\"response\", response)\n//        if (status === 200){\n//               console.log(\"yes\")\n//               setTweetsInit(response)\n//               setTweetsDidSet(true)\n//                //console.log(\"tweetsINIt\", tweetsInit)\n//            } else {\n//                alert(\"There was an error\")\n//            }\n//  }\n//    // do my lookup\n//    apiTweetList(props.username, handleTweetListLookup)\n//    }\n//  },[tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n//\n//\n//  const handledidRetweet = (newTweet) => {\n//    const updateTweetsInit = [...tweetsInit]\n//    updateTweetsInit.unshift(newTweet)\n//    setTweetsInit(updateTweetsInit)\n//    const updateFinalTweets = [...tweets]\n//    updateFinalTweets.unshift(tweets)\n//    setTweets(updateFinalTweets)\n//\n//  }\n//  return  tweets.map((item, index)=>{\n//                //console.log(tweetsInit)\n//                return <Tweet tweet={item}\n//                didRetweet = {handledidRetweet}\n//                className='my-5 py-5 border bg-white text-dark'\n//                key={`${index}-{item.id}`}/>\n//            })\n//\n//}\n// Shifted this all to buttons.js\n//export function ActionBtn(props) {\n//     const {tweet, action, didPerformAction} = props\n//     const likes = tweet.likes ? tweet.likes :0\n//    // const [likes, setLikes] = useState();\n////     const [userLike, setUserLike] = useState(false)\n//     const className = props.className ? props.className : 'btn btn-primary btn-sm'\n//     const actionDisplay = action.display ? action.display : 'Action'\n//     //const display = action.type === 'like' ? `${tweet.likes} ${action.display}` : action.display\n//     const handleActionBackendEvent = (response, status) =>{\n//        console.log(status, response)\n//        if((status === 200 || status === 201) && didPerformAction){\n//            //setLikes(response.likes)\n//            didPerformAction(response, status)\n////            setUserLike(true)\n//        }\n////        if (action.type === 'like') {\n////           if(userLike === true) {\n////            setLikes(likes - 1)\n////            setUserLike(false)\n////            } else {\n////            setLikes(likes + 1)\n////            setUserLike(true)\n////            }\n//            //likes = tweet.likes + 1\n////        }\n//     }\n//     const handleClick = (event) => {\n//        event.preventDefault()\n//        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n////        if (action.type === 'like') {\n////           if(userLike === true) {\n////            setLikes(likes - 1)\n////            setUserLike(false)\n////            } else {\n////            setLikes(likes + 1)\n////            setUserLike(true)\n////            }\n////            //likes = tweet.likes + 1\n////        }\n//     }\n//     const display = action.type === 'like' ? `${likes} ${actionDisplay}` : action.display\n//     return <button className={className} onClick={handleClick}>{display}</button>\n//}\n\n//export function ParentTweet(props){\n//     const {tweet} = props\n//     return tweet.parent ? <div className = 'row'>\n//               <div className = 'col-11 mx-auto p-3 border rounded'>\n//                <p className='mb-0 text-muted small'>Retweet</p>\n//                <Tweet hideActions className = {' '} tweet={tweet.parent} />\n//                </div>\n//                </div> : null\n//}\n//\n//\n//export function Tweet(props) {\n//    const {tweet, didRetweet, hideActions} = props\n//    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n//    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n//\n//    const handlePerformAction = (newActionTweet, status) => {\n//        if (status === 200){\n//            setActionTweet(newActionTweet)\n//        } else if (status === 201) {\n//        //let the tweet list know\n//            if (didRetweet){\n//                didRetweet(newActionTweet)\n//            }\n//        }\n//\n//    }\n//    return <div className={className}>\n//        <div>\n//                <p> {tweet.id} - {tweet.content} </p>\n//                <ParentTweet tweet={tweet} />\n//        </div>\n//        {(actionTweet && hideActions !== true) && <div className = 'btn btn-group'>\n//            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"like\", display:\"Likes\"}} />\n//            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"unlike\", display:\"Unlike\"}} />\n//            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"retweet\", display:\"Retweet\"}} />\n//\n//        </div>\n//       }\n//    </div>\n//}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n           <TweetsComponent />\n        </div>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {FeedComponent, TweetsComponent, TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\n\n//ReactDOM.render(\n//  //<React.StrictMode>\n//    <App />,\n//  //</React.StrictMode>,\n//  document.getElementById('root')\n//);\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n    console.log(tweetsEl.dataset)\n    const MyComponent = e(TweetsComponent, tweetsEl.dataset)\n   // ReactDOM.render(<TweetsComponent />, tweetsEl);\n   ReactDOM.render(MyComponent, tweetsEl);\n}\n\nconst f = React.createElement\nconst tweetsFeedEl = document.getElementById(\"tweetme-2-feed\")\nif (tweetsFeedEl) {\n    const MyComponent = f(FeedComponent, tweetsFeedEl.dataset)\n   // ReactDOM.render(<TweetsComponent />, tweetsEl);\n   ReactDOM.render(MyComponent, tweetsFeedEl);\n}\n\nconst TweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\nTweetDetailElements.forEach(container => {\n    ReactDOM.render(\n    e(TweetDetailComponent, container.dataset),\n    container);\n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}