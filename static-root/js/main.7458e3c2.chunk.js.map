{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/create.js","tweets/detail.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","content","ref","required","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","window","location","pathname","urltweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","Fragment","href","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","handledidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","MyComponent","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,gLCgBpC,SAASC,EAAcC,EAAQC,EAAUC,EAAUC,GACtD,IAAIC,EACAD,IACJC,EAAWC,KAAKC,UAAUH,IAE1B,IAAMI,EAAM,IAAIC,eACPC,EAAG,mCAA+BR,GACxCM,EAAIG,aAAe,OACnB,IAAMC,EAxBb,SAAmBC,GACf,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE5B,IADA,IAAIC,EAAUF,SAASC,OAAOE,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,IAAIH,EAASC,EAAQE,GAAGE,OAExB,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAQP,EAAO,IAAM,CACvDC,EAAcS,mBAAmBP,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAIZ,OAAON,EAWcU,CAAU,aAC5BhB,EAAIiB,KAAKxB,EAAQS,GACjBF,EAAIkB,iBAAiB,eAAgB,oBAEnCd,IAEDJ,EAAIkB,iBAAiB,mBAAoB,kBACzClB,EAAIkB,iBAAiB,cAAed,IAGpCJ,EAAImB,OAAS,WACTxB,EAASK,EAAIoB,SAAUpB,EAAIqB,SAE/BrB,EAAIsB,QAAU,SAAUC,GACpBC,QAAQC,IAAIF,GACZ5B,EAAS,CAAC,QAAW,4BAA6B,MAEtD6B,QAAQC,IAAI5B,GACZG,EAAI0B,KAAK7B,GCpCV,SAAS8B,EAAUC,GAAQ,IACtBC,EAAmCD,EAAnCC,MAAOC,EAA4BF,EAA5BE,OAAQC,EAAoBH,EAApBG,iBAChBC,EAAQH,EAAMG,MAAQH,EAAMG,MAAO,EAEnCC,EAAYL,EAAMK,UAAYL,EAAMK,UAAY,yBAChDC,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAElDC,EAA2B,SAAChB,EAAUC,GACzCG,QAAQC,IAAIJ,EAAQD,GACL,MAAXC,GAA6B,MAAXA,IAAmBU,GACrCA,EAAiBX,EAAUC,IAO5Bc,EAA0B,SAAhBL,EAAOO,KAAP,UAA4BL,EAA5B,YAAqCE,GAAkBJ,EAAOK,QAC9E,OAAO,4BAAQF,UAAWA,EAAWK,QALjB,SAACC,GAClBA,EAAMC,iBCdP,SAAwBC,EAASX,EAASnC,GAEhDH,EAAc,OAAQ,kBAAmBG,EAD3B,CAAC+C,GAAID,EAASX,OAAQA,IDc7Ba,CAAed,EAAMa,GAAIZ,EAAOO,KAAMD,KAGmBD,GElB1D,SAASS,EAAYhB,GACxB,IAAMiB,EAAcC,IAAMC,YACnBC,EAAYpB,EAAZoB,SACDC,EAAsB,SAAC7B,EAAUC,GACjB,MAAXA,EACC2B,EAAS5B,IAETI,QAAQC,IAAIL,GACZ8B,MAAM,uCAYlB,OAAO,yBAAKjB,UAAWL,EAAMK,WACzB,0BAAMkB,SARW,SAACZ,GAClBA,EAAMC,iBACN,IAAMY,EAASP,EAAYQ,QAAQC,MDlB1C9D,EAAc,OAAQ,kBCoBQyD,EDpBqB,CAACM,QCoB9BH,IACfP,EAAYQ,QAAQC,MAAQ,KAIxB,8BAAUE,IAAKX,EAAaY,UAAU,EAAMxB,UAAU,eAAe5B,KAAK,UAG1E,4BAAQgC,KAAK,SAASJ,UAAU,wBAAhC,W,yBC1BL,SAASyB,EAAY9B,GAAO,IACvBC,EAASD,EAATC,MACP,OAAOA,EAAM8B,OAAS,yBAAK1B,UAAY,OAC7B,yBAAKA,UAAY,qCAChB,uBAAGA,UAAU,yBAAb,WACA,kBAAC2B,EAAD,CAAOC,aAAW,EAAC5B,UAAa,IAAKJ,MAAOA,EAAM8B,WAEzC,KAIlB,SAASC,EAAMhC,GAAQ,IACnBC,EAAkCD,EAAlCC,MAAOiC,EAA2BlC,EAA3BkC,WAAYD,EAAejC,EAAfiC,YADD,EAEaE,mBAASnC,EAAMC,MAAQD,EAAMC,MAAQ,MAFlD,mBAElBmC,EAFkB,KAELC,EAFK,KAGnBhC,EAAYL,EAAMK,UAAYL,EAAMK,UAAY,0BAEhDiC,EADOC,OAAOC,SAASC,SACVH,MAAL,YAAW,WAAX,cACRI,EAAaJ,EAAQA,EAAMK,OAAOC,SAAW,EAC7CC,EAAW,UAAG5C,EAAMa,MAAT,UAAqB4B,GAKhCI,EAAsB,SAACC,EAAgBtD,GAC1B,MAAXA,EACA4C,EAAeU,GACG,MAAXtD,GAEHyC,GACAA,EAAWa,IAKvB,OAAO,yBAAK1C,UAAWA,GACnB,6BACQ,+BAAKJ,EAAMa,GAAX,MAAkBb,EAAM0B,QAAxB,KACA,kBAACG,EAAD,CAAa7B,MAAOA,KAE5B,yBAAKI,UAAY,iBACZ+B,IAA+B,IAAhBH,GAA0B,kBAAC,IAAMe,SAAP,KAC1C,kBAACjD,EAAD,CAAWE,MAAOmC,EAAajC,iBAAkB2C,EAAqB5C,OAAQ,CAACO,KAAK,OAAQF,QAAQ,WACpG,kBAACR,EAAD,CAAWE,MAAOmC,EAAajC,iBAAkB2C,EAAqB5C,OAAQ,CAACO,KAAK,SAAUF,QAAQ,YACtG,kBAACR,EAAD,CAAWE,MAAOmC,EAAajC,iBAAkB2C,EAAqB5C,OAAQ,CAACO,KAAK,UAAWF,QAAQ,eAGzF,IAAbsC,EAAoB,KAAO,4BAAQxC,UAAU,iCAAiCK,QA3BpE,SAACC,GAChBA,EAAMC,iBACN2B,OAAOC,SAASS,KAAhB,WAA2BhD,EAAMa,MAyBD,UC7CjC,SAASoC,EAAWlD,GAAQ,IAAD,EACMmC,mBAAS,IADf,mBACvBgB,EADuB,KACXC,EADW,OAEFjB,mBAAS,IAFP,mBAEvBkB,EAFuB,KAEfC,EAFe,OAGUnB,oBAAS,GAHnB,mBAGvBoB,EAHuB,KAGTC,EAHS,KAK5BC,qBAAU,WACR,IAAMC,EAAQ,YAAI1D,EAAM2D,WAAWC,OAAOT,GACtCO,EAAM1E,SAAWqE,EAAOrE,SAC5BsE,EAAUI,GACV9D,QAAQC,IAAI,SAAUwD,MAErB,CAACrD,EAAM2D,UAAWN,EAAQF,IAE7BM,qBAAU,WACV,IAAqB,IAAjBF,EAAuB,EHL1B,SAAsBM,EAAU9F,GACnC,IAAID,EAAW,WACX+F,IACD/F,EAAQ,4BAAwB+F,IAEnCjG,EAAc,MAAOE,EAAUC,GGa/B+F,CAAa9D,EAAM6D,UAZe,SAACrE,EAAUC,GACzCG,QAAQC,IAAI,WAAYL,GACT,MAAXC,GACGG,QAAQC,IAAI,OACZuD,EAAc5D,GACdgE,GAAgB,IAGflC,MAAM,8BAMlB,CAAC6B,EAAYI,EAAcC,EAAiBxD,EAAM6D,WAGpD,IAAME,EAAmB,SAACC,GACxB,IAAMC,EAAgB,YAAOd,GAC7Bc,EAAiBC,QAAQF,GACzBZ,EAAca,GACd,IAAME,EAAiB,YAAOd,GAC9Bc,EAAkBD,QAAQb,GAC1BC,EAAUa,IAGZ,OAAQd,EAAOe,KAAI,SAACC,EAAMC,GAEZ,OAAO,kBAACtC,EAAD,CAAO/B,MAAOoE,EACrBnC,WAAc6B,EACd1D,UAAU,sCACVkE,IAAG,UAAKD,EAAL,mBCzCZ,SAASE,EAAgBxE,GAAQ,IAAD,EACDmC,mBAAS,IADR,mBAC5BwB,EAD4B,KACjBc,EADiB,KAE7BC,EAA8B,UAAnB1E,EAAM0E,SAUvB,OAAO,yBAAKrE,UAAWL,EAAMK,YACX,IAAbqE,GAAqB,kBAAC1D,EAAD,CAAaI,SAVhB,SAAC4C,GAEjB,IAAIW,EAAa,YAAOhB,GACxBgB,EAAcT,QAAQF,GACtBS,EAAaE,IAM6CtE,UAAU,gBAC1E,kBAAC6C,EAAD,eAAYS,UAAWA,GAAe3D,KAKnC,SAAS4E,EAAqB5E,GAAQ,IACnCa,EAAWb,EAAXa,QADkC,EAEPsB,oBAAS,GAFF,mBAElC0C,EAFkC,KAEvBC,EAFuB,OAGf3C,mBAAS,MAHM,mBAGlClC,EAHkC,KAG3B8E,EAH2B,KAKnCC,EAAsB,SAACxF,EAAUC,GACrB,MAAXA,EACHsF,EAASvF,GAGT8B,MAAM,2CAWV,OARGmC,qBAAU,YACS,IAAdoB,KJjCL,SAAwBhE,EAAS9C,GACpCH,EAAc,MAAD,kBAAmBiD,GAAW9C,GIiCnCkH,CAAepE,EAASmE,GACxBF,GAAa,MAGlB,CAACjE,EAASgE,EAAWC,IAEP,OAAV7E,EAAiB,KAAO,kBAAC+B,EAAD,CAAO/B,MAAOA,EAAOI,UAAaL,EAAMK,YChB5D6E,MA1Bf,WAEE,OACE,yBAAK7E,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK8E,IAAKC,IAAM/E,UAAU,WAAWgF,IAAI,SACzC,mCACO,4CADP,wBAGA,6BACG,kBAACb,EAAD,OAGH,uBACEnE,UAAU,WACV4C,KAAK,sBACLqC,OAAO,SACPC,IAAI,uBAJN,kBCVYC,QACW,cAA7BjD,OAAOC,SAASiD,UAEe,UAA7BlD,OAAOC,SAASiD,UAEhBlD,OAAOC,SAASiD,SAASnD,MACvB,2DCXN,IAAMoD,EAAQ/G,SAASgH,eAAe,QAClCD,GACAE,IAASC,OAAO,kBAAC,EAAD,MAASH,GAS7B,IAAM/F,EAAIuB,IAAM4E,cACVC,EAAWpH,SAASgH,eAAe,aACzC,GAAII,EAAU,CACVnG,QAAQC,IAAIkG,EAASC,SACrB,IAAMC,EAActG,EAAE6E,EAAiBuB,EAASC,SAEjDJ,IAASC,OAAOI,EAAaF,GAGJpH,SAASuH,iBAAiB,qBAElCC,SAAQ,SAAAC,GACxBR,IAASC,OACTlG,EAAEiF,EAAsBwB,EAAUJ,SAClCI,MDmGE,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhH,QAAQgH,MAAMA,EAAMC,c","file":"static/js/main.7458e3c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data){\n    let jsonData;\n    if (data){\n    jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n       const url = `http://localhost:8000/api${endpoint}`\n       xhr.responseType = 'json'\n       const csrftoken = getCookie('csrftoken');\n       xhr.open(method, url)\n       xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n     if (csrftoken){\n        //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")  still not sure about this CORS issue\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n     }\n// otherwise if there was no csrf token it was giving an error\n        xhr.onload = function() {\n            callback(xhr.response, xhr.status)\n        }\n        xhr.onerror = function (e) {\n            console.log(e)\n            callback({\"message\": \"The request was an error\"}, 400)\n        }\n        console.log(jsonData)\n        xhr.send(jsonData)\n    }\n\n\n//export function loadTweets(callback) {\n//\n//        const xhr = new XMLHttpRequest()\n//        const method = 'GET'\n//        const url = \" http://localhost:8000/api/tweets\"\n//        const responseType = \"json\"\n//\n//        xhr.responseType = responseType\n//        xhr.open(method, url)\n//        xhr.onload = function() {\n//            callback(xhr.response, xhr.status)\n//        }\n//        xhr.onerror = function (e) {\n//            console.log(e)\n//            callback({\"message\": \"The request was an error\"}, 400)\n//        }\n//        xhr.send()\n//    }\n\n//exported these all to lookup.js in tweets\n//export function createTweet(newTweet, callback){\n// lookup(\"POST\", \"/tweets/create/\", callback, {content:newTweet} )\n//}\n//\n//export function loadTweets(callback) {\n//\n//        lookup(\"GET\", \"/tweets/\", callback)\n//      }\n","import React from 'react'\n\nimport {apiTweetAction} from './lookup'\n\n\n\nexport function ActionBtn(props) {\n     const {tweet, action, didPerformAction} = props\n     const likes = tweet.likes ? tweet.likes :0\n\n     const className = props.className ? props.className : 'btn btn-primary btn-sm'\n     const actionDisplay = action.display ? action.display : 'Action'\n\n     const handleActionBackendEvent = (response, status) =>{\n        console.log(status, response)\n        if((status === 200 || status === 201) && didPerformAction){\n            didPerformAction(response, status)\n        }\n     }\n     const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n     }\n     const display = action.type === 'like' ? `${likes} ${actionDisplay}` : action.display\n     return <button className={className} onClick={handleClick}>{display}</button>\n}","import {backendLookup} from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback){\n backendLookup(\"POST\", \"/tweets/create/\", callback, {content:newTweet} )\n}\n\nexport function apiTweetAction(tweetId, action,  callback){\n  const data = {id: tweetId, action: action}\n backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup(\"GET\", `/tweets/${tweetId}`, callback)\n}\n\nexport function apiTweetList(username, callback) {\n    let endpoint = \"/tweets/\"\n    if (username){\n       endpoint = `/tweets/?username=${username}`\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}\n\n\n","import React from 'react'\n\n\nimport {apiTweetCreate} from './lookup'\n\n\nexport function TweetCreate(props) {\n    const textAreaRef = React.createRef()\n    const {didTweet} = props\n    const handleBackendUpdate = (response, status) =>{\n           if (status === 201){\n                didTweet(response)\n           } else {\n                console.log(response)\n                alert(\"An error occured please try again\")\n           }\n\n        }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n\n        apiTweetCreate(newVal, handleBackendUpdate)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n        <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n            </textarea>\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n        </form>\n        </div>\n        }\n","import React, {useState} from 'react'\n\nimport {ActionBtn} from './buttons'\n\n\nexport function ParentTweet(props){\n     const {tweet} = props\n     return tweet.parent ? <div className = 'row'>\n               <div className = 'col-11 mx-auto p-3 border rounded'>\n                <p className='mb-0 text-muted small'>Retweet</p>\n                <Tweet hideActions className = {' '} tweet={tweet.parent} />\n                </div>\n                </div> : null\n}\n\n\nexport function Tweet(props) {\n    const {tweet, didRetweet, hideActions} = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/)\n    const urltweetId = match ? match.groups.tweetid : -1\n    const isDetail = `${tweet.id}` === `${urltweetId}`\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n    const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200){\n            setActionTweet(newActionTweet)\n        } else if (status === 201) {\n        //let the tweet list know\n            if (didRetweet){\n                didRetweet(newActionTweet)\n            }\n        }\n\n    }\n    return <div className={className}>\n        <div>\n                <p> {tweet.id} - {tweet.content} </p>\n                <ParentTweet tweet={tweet} />\n        </div>\n        <div className = 'btn btn-group'>\n           {(actionTweet && hideActions !== true) &&  <React.Fragment>\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"like\", display:\"Likes\"}} />\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"unlike\", display:\"Unlike\"}} />\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"retweet\", display:\"Retweet\"}} />\n            </React.Fragment>\n            }\n            {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\n        </div>\n\n    </div>\n}","import React, {useState, useEffect} from 'react'\n\nimport {apiTweetList} from './lookup'\n\nimport {Tweet} from './detail'\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false) // added because of infinite loop of lookup function\n    //setTweetsInit([...props.newTweets].concat()) commented because infinite loop\n      useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n        setTweets(final)\n        console.log(\"tweets\", tweets)\n        }\n      }, [props.newTweets, tweets, tweetsInit]) // this is called as the dependency array as on what is the useEffect dependent on\n\n      useEffect(() => {\n      if (tweetsDidSet === false){   //added this if loop to stop lookup loading again and again\n        const handleTweetListLookup = (response, status) => {\n        console.log(\"response\", response)\n        if (status === 200){\n               console.log(\"yes\")\n               setTweetsInit(response)\n               setTweetsDidSet(true)\n                //console.log(\"tweetsINIt\", tweetsInit)\n            } else {\n                alert(\"There was list error\")\n            }\n  }\n    // do my lookup\n    apiTweetList(props.username, handleTweetListLookup)\n    }\n  },[tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n\n  const handledidRetweet = (newTweet) => {\n    const updateTweetsInit = [...tweetsInit]\n    updateTweetsInit.unshift(newTweet)\n    setTweetsInit(updateTweetsInit)\n    const updateFinalTweets = [...tweets]\n    updateFinalTweets.unshift(tweets)\n    setTweets(updateFinalTweets)\n\n  }\n  return  tweets.map((item, index)=>{\n                //console.log(tweetsInit)\n                return <Tweet tweet={item}\n                didRetweet = {handledidRetweet}\n                className='my-5 py-5 border bg-white text-dark'\n                key={`${index}-{item.id}`}/>\n            })\n\n}","import React, {useEffect, useState} from 'react'\n\nimport {TweetCreate} from './create'\nimport {Tweet} from './detail'\nimport {apiTweetDetail} from './lookup'\nimport {TweetsList} from './list'\n\n\n\n\n\nexport function TweetsComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const handleNewTweet = (newTweet) =>{\n     // backend api response handler\n           let tempNewTweets = [...newTweets]\n           tempNewTweets.unshift(newTweet)\n           setNewTweets(tempNewTweets)\n\n        }\n\n\n    return <div className={props.className} >\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n     <TweetsList newTweets={newTweets} {...props}/>\n    </div>\n}\n\n\n export function TweetDetailComponent(props) {\n    const {tweetId} = props\n    const [didLookup, setDidLookup] = useState(false)\n    const [tweet, setTweet] = useState(null)\n\n    const handleBackendLookup = (response, status) => {\n        if(status === 200){\n        setTweet(response)\n        }\n        else{\n        alert('There was an error finding your tweet.')\n        }\n    }\n       useEffect(()=>{\n        if (didLookup === false){\n            apiTweetDetail(tweetId, handleBackendLookup)\n            setDidLookup(true)\n        }\n\n    }, [tweetId, didLookup, setDidLookup])\n\n    return tweet === null ? null : <Tweet tweet={tweet} className = {props.className} />\n }\n\n//export function TweetsComponent(props) {\n//\n//    const textAreaRef = React.createRef()\n//    const [newTweets, setNewTweets] = useState([])\n//\n//    const canTweet = props.canTweet === \"false\" ? false : true\n//    const handleBackendUpdate = (response, status) =>\n//        {  // backend api response handler\n//           let tempNewTweets = [...newTweets]\n//           if (status === 201){\n//           tempNewTweets.unshift(response)\n//           setNewTweets(tempNewTweets)\n//           } else {\n//                console.log(response)\n//                alert(\"An error occured please try again\")\n//           }\n//\n//        }\n//\n//    const handleSubmit = (event) => {\n//        event.preventDefault()\n//        const newVal = textAreaRef.current.value\n////        let tempNewTweets = [...newTweets] // copy the new tweets array\n//\n//\n//\n//        apiTweetCreate(newVal, handleBackendUpdate)\n//\n////        createTweet(newVal, (response, status)=> {\n////           console.log(response, status)\n////           if (status === 201){\n////           tempNewTweets.unshift(response)\n////           setNewTweets(tempNewTweets)\n////           } else {\n////                console.log(response)\n////                alert(\"An error occured please try again\")\n////           }\n////\n////      })\n////\n////        setNewTweets(tempNewTweets)\n//        textAreaRef.current.value = ''\n//    }\n//    return <div className={props.className} >\n//    {canTweet === true &&<div className='col-12 mb -3'>\n//    <form onSubmit={handleSubmit}>\n//        <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n//\n//        </textarea>\n//        <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n//    </form>\n//    </div>\n//    }\n//    <TweetsList newTweets={newTweets} {...props}/>\n//    </div>\n//}\n\n\n//export function TweetsList(props) {\n//    const [tweetsInit, setTweetsInit] = useState([])\n//    const [tweets, setTweets] = useState([])\n//    const [tweetsDidSet, setTweetsDidSet] = useState(false) // added because of infinite loop of lookup function\n//    //setTweetsInit([...props.newTweets].concat()) commented because infinite loop\n//      useEffect(() => {\n//        const final = [...props.newTweets].concat(tweetsInit)\n//        if (final.length !== tweets.length) {\n//        setTweets(final)\n//        console.log(\"tweets\", tweets)\n//        }\n//      }, [props.newTweets, tweets, tweetsInit]) // this is called as the dependency array as on what is the useEffect dependent on\n//\n//      useEffect(() => {\n//      if (tweetsDidSet === false){   //added this if loop to stop lookup loading again and again\n//        const handleTweetListLookup = (response, status) => {\n//        console.log(\"response\", response)\n//        if (status === 200){\n//               console.log(\"yes\")\n//               setTweetsInit(response)\n//               setTweetsDidSet(true)\n//                //console.log(\"tweetsINIt\", tweetsInit)\n//            } else {\n//                alert(\"There was an error\")\n//            }\n//  }\n//    // do my lookup\n//    apiTweetList(props.username, handleTweetListLookup)\n//    }\n//  },[tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n//\n//\n//  const handledidRetweet = (newTweet) => {\n//    const updateTweetsInit = [...tweetsInit]\n//    updateTweetsInit.unshift(newTweet)\n//    setTweetsInit(updateTweetsInit)\n//    const updateFinalTweets = [...tweets]\n//    updateFinalTweets.unshift(tweets)\n//    setTweets(updateFinalTweets)\n//\n//  }\n//  return  tweets.map((item, index)=>{\n//                //console.log(tweetsInit)\n//                return <Tweet tweet={item}\n//                didRetweet = {handledidRetweet}\n//                className='my-5 py-5 border bg-white text-dark'\n//                key={`${index}-{item.id}`}/>\n//            })\n//\n//}\n// Shifted this all to buttons.js\n//export function ActionBtn(props) {\n//     const {tweet, action, didPerformAction} = props\n//     const likes = tweet.likes ? tweet.likes :0\n//    // const [likes, setLikes] = useState();\n////     const [userLike, setUserLike] = useState(false)\n//     const className = props.className ? props.className : 'btn btn-primary btn-sm'\n//     const actionDisplay = action.display ? action.display : 'Action'\n//     //const display = action.type === 'like' ? `${tweet.likes} ${action.display}` : action.display\n//     const handleActionBackendEvent = (response, status) =>{\n//        console.log(status, response)\n//        if((status === 200 || status === 201) && didPerformAction){\n//            //setLikes(response.likes)\n//            didPerformAction(response, status)\n////            setUserLike(true)\n//        }\n////        if (action.type === 'like') {\n////           if(userLike === true) {\n////            setLikes(likes - 1)\n////            setUserLike(false)\n////            } else {\n////            setLikes(likes + 1)\n////            setUserLike(true)\n////            }\n//            //likes = tweet.likes + 1\n////        }\n//     }\n//     const handleClick = (event) => {\n//        event.preventDefault()\n//        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n////        if (action.type === 'like') {\n////           if(userLike === true) {\n////            setLikes(likes - 1)\n////            setUserLike(false)\n////            } else {\n////            setLikes(likes + 1)\n////            setUserLike(true)\n////            }\n////            //likes = tweet.likes + 1\n////        }\n//     }\n//     const display = action.type === 'like' ? `${likes} ${actionDisplay}` : action.display\n//     return <button className={className} onClick={handleClick}>{display}</button>\n//}\n\n//export function ParentTweet(props){\n//     const {tweet} = props\n//     return tweet.parent ? <div className = 'row'>\n//               <div className = 'col-11 mx-auto p-3 border rounded'>\n//                <p className='mb-0 text-muted small'>Retweet</p>\n//                <Tweet hideActions className = {' '} tweet={tweet.parent} />\n//                </div>\n//                </div> : null\n//}\n//\n//\n//export function Tweet(props) {\n//    const {tweet, didRetweet, hideActions} = props\n//    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n//    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n//\n//    const handlePerformAction = (newActionTweet, status) => {\n//        if (status === 200){\n//            setActionTweet(newActionTweet)\n//        } else if (status === 201) {\n//        //let the tweet list know\n//            if (didRetweet){\n//                didRetweet(newActionTweet)\n//            }\n//        }\n//\n//    }\n//    return <div className={className}>\n//        <div>\n//                <p> {tweet.id} - {tweet.content} </p>\n//                <ParentTweet tweet={tweet} />\n//        </div>\n//        {(actionTweet && hideActions !== true) && <div className = 'btn btn-group'>\n//            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"like\", display:\"Likes\"}} />\n//            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"unlike\", display:\"Unlike\"}} />\n//            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"retweet\", display:\"Retweet\"}} />\n//\n//        </div>\n//       }\n//    </div>\n//}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n           <TweetsComponent />\n        </div>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent, TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\n\n//ReactDOM.render(\n//  //<React.StrictMode>\n//    <App />,\n//  //</React.StrictMode>,\n//  document.getElementById('root')\n//);\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n    console.log(tweetsEl.dataset)\n    const MyComponent = e(TweetsComponent, tweetsEl.dataset)\n   // ReactDOM.render(<TweetsComponent />, tweetsEl);\n   ReactDOM.render(MyComponent, tweetsEl);\n}\n\nconst TweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\nTweetDetailElements.forEach(container => {\n    ReactDOM.render(\n    e(TweetDetailComponent, container.dataset),\n    container);\n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}